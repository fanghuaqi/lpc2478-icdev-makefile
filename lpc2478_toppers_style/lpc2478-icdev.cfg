# NXP LPC2478 ARM7TDMI-S with 512kB Flash and 64kB Local On-Chip SRAM (98kB total), clocked with 4MHz internal RC oscillator

# 本配置文件只适用于openocd4.0
# 初始化OpenJTAG的接口
interface ft2232	# 用到的USB驱动, OPENJTAG采用的是ftd2232的芯片
ft2232_vid_pid 0x1457 0x5118	# USB驱动的一些信息，用以找到OpenJTAG
ft2232_device_desc "USB<=>JTAG&RS232 A"  #设备名
ft2232_layout jtagkey		#ft2232的逻辑实现 jtagkey


# 确定处理器名
if { [info exists CHIPNAME] } {
	set  _CHIPNAME $CHIPNAME
} else {
	set  _CHIPNAME lpc2478
}

# 确定大小端
if { [info exists ENDIAN] } {
	set  _ENDIAN $ENDIAN
} else {
	set  _ENDIAN little
}

# 确定处理器的TAP ID。 openJTAG会读取TAP的信息
if { [info exists CPUTAPID ] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x4f1f0f0f
}

# 复位时的延迟， 单位 ns
#delays on reset lines
jtag_nsrst_delay 100
jtag_ntrst_delay 100

gdb_flash_program enable
gdb_memory_map enable
# 复位方式
# LPC2000 -> SRST causes TRST
reset_config trst_and_srst srst_pulls_trst

# 建立新的TAP
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

# 建立的新的调试目标
set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4

# 确定缓冲区，加速下载过程
# LPC2478 has 64kB of SRAM on its main system bus (so-called Local On-Chip SRAM)
$_TARGETNAME configure -work-area-phys 0x40000000 -work-area-size 0x10000 -work-area-backup 0


# 确定存储结构
# LPC2478 has 512kB of FLASH, but upper 8kB are occupied by bootloader.
# After reset the chip uses its internal 4MHz RC oscillator.
# flash bank lpc2000 <base> <size> 0 0 <target#> <variant> <clock> [calc checksum]
# 片内flash,
# LPC2478的512KB片内flash中，最高端8KB被bootloader占用，不能写入
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME lpc2000 0x0 0x7D000 0 0 $_TARGETNAME lpc2000_v2 12000 calc_checksum

# 片外nor flash, CFI(Common Flash Interface)是一个NorFlash的通用接口
# External 16-bit flash at chip select CS0 (SST39VF6401B, 8 MBytes)
flash bank $_CHIPNAME.extflash cfi 0x80000000 0x800000 2 2 $_TARGETNAME jedec_probe


# 确定jtag时钟，如无实时时钟的话，则使用默认值 500khz
# Try to use RCLK, if RCLK is not available use "normal" mode. 4MHz / 6 = 666kHz, so use 500.
jtag_rclk 500


# 读取内存或寄存器值的的函数
proc read_register {register} {
    set result ""
    mem2array result 32 $register 1
    return $result(0)
}

# 初始化PLL的函数， 初始化后 cclk =72Mhz
# Enable the PLL.
# Generate maximum CPU clock (72 MHz) Run from internal RC oscillator.
# Note: The PLL output runs at a frequency N times the desired CPU clock.
#       It in unavoidable that the CPU clock drops down to (4 MHz/N) during
#       the initialization!
#       Here: N=4
#       Note that if the PLL is already active at the time this script is
#       called, the effective value of N is the value of CCLKCFG at that time!
#
proc enable_pll {} {
    # Disconnect PLL in case it is already connected
    # if {[expr [read_register 0xE01FC080] & 0x03] == 3} {
    # Disconnect it, but leave it enabled
    # (This MUST be done in two steps)
    mww 0xE01FC080 0x00000001       # PLLCON: disconnect PLL
    mww 0xE01FC08C 0x000000AA       # PLLFEED
    mww 0xE01FC08C 0x00000055       # PLLFEED
    #}
    # Disable PLL (as it might already be enabled at this time!)
    mww 0xE01FC080 0x00000000       # PLLCON: disable PLL
    mww 0xE01FC08C 0x000000AA       # PLLFEED
    mww 0xE01FC08C 0x00000055       # PLLFEED

    # Setup PLL to generate 288 MHz from internal RC oscillator
    mww 0xE01FC10C 0x00000001       # CLKSRCSEL: IRC
    mww 0xE01FC084 0x0000000B       # PLLCFG: N=1, M=12
    mww 0xE01FC08C 0x000000AA       # PLLFEED
    mww 0xE01FC08C 0x00000055       # PLLFEED
    mww 0xE01FC080 0x00000001       # PLLCON: enable PLL
    mww 0xE01FC08C 0x000000AA       # PLLFEED
    mww 0xE01FC08C 0x00000055       # PLLFEED
    sleep 100
    mww 0xE01FC104 0x00000003       # CCLKCFG: divide by 4 (72 MHz)
    mww 0xE01FC080 0x00000003       # PLLCON: connect PLL
    mww 0xE01FC08C 0x000000AA       # PLLFEED
    mww 0xE01FC08C 0x00000055       # PLLFEED
}



# 执行reset
# init命令后，自动执行一下函数，即通过OpenJTAG复位后要完成的工作
$_TARGETNAME configure -event reset-init {


  	arm core_state arm
	# 加速下载
    arm7_9 dcc_downloads enable     # Speed up downloads by using DCC transfer
    arm7_9 fast_memory_access enable

	# 外设时钟
    # Peripheral clocks
    mww 0xE01FC0C4 0x04280FFE       # PCONP: (reset value)
	
	# 中断向量重映射。 LPC2478的中断向量不能重新映射到DCSO段上
    # Map the sdram to the vector table area (0x00...0x3F)
	# for debug, all program will be loaded into sdram
    mww 0xE01FC040 0x00000002       # MEMMAP: User RAM 片内RAM中
	mdw 0xE01FC040	1

 	# 打开Flash加速，此时不能写FLASH
    # Memory accelerator module
    mww 0xE01FC004 0x00000003       # MAMTIM: 3 clock cycles
    mww 0xE01FC000 0x00000002       # MAMCR: fully enabled

	# 存储初始化之引脚设定
    # Enable external memory bus (16-bit SDRAM at DYCS0, 16-bit flash at
    # CS1, nand flash at cs2)
	mww 0xE002C010 0x555fffff   
    mww 0xE002C014 0x05050555       # PINSEL5: P2.16=CAS, P2.17=RAS, P2.18=CLKOUT0,
                                    # P2.20=DYCS0, P2.24=CKEOUT0, P2.28=DQMOUT0,
                                    # P2.29=DQMOUT1, P2.30=DQMOUT2, P2.31=DQMOUT3
	#mww 0xE002C054 0xaa02022a		# PINMODE5
    mww 0xE002C018 0x55555555       # PINSEL6: P3.0...P3.15=D0...D15
	#mww 0xE002C058 0xaaaaaaaa		# PINMODE6
   # mww 0xE002C01C 0x55555555       # PINSEL7: P3.16...P3.31=D16...D31
    mww 0xE002C020 0x55555555       # PINSEL8: P4.0...P4.15=A0...A15
	#mww 0xE002C060 0xaaaaaaaa		# PINMODE8
    mww 0xE002C024 0x5a555555       # PINSEL9: P4.16...P4.22=A16...A22, P4.24=OE,
                                    # P4.25=WE, P4.30=CS0, P4.31=CS1
	#mww 0xE002C064 0xa0aaaaaa
    mww 0xFFE08000 0x00000001       # EMCControl: Enable EMC, no mirror mode

    # Start PLL, then use faster JTAG clock
    enable_pll
    jtag_rclk 3000

    # 存储初始化之控制器设定，设置只使用于72Mhz时的情况
    # 16-bit flash @ CS1 (MX29LV320ATTC-70, 4 MBytes)
    mww 0xFFE08220 0x00080081       # EMCStaticConfig1: 16 bit, PB=1, buffers on
    mww 0xFFE08224 0x00000002       # EMCStaticWaitWen1
    mww 0xFFE08228 0x00000002       # EMCStaticWaitOen1
    mww 0xFFE0822C 0x0000001f       # EMCStaticWaitRd1
    mww 0xFFE08230 0x0000001f       # EMCStaticWaitPage1
    mww 0xFFE08234 0x0000001f       # EMCStaticWaitWr1
    mww 0xFFE08238 0x0000000f       # EMCStaticWaitTurn1
	
	# nand初始化未添加
    # 8-bit NAND @ CS2
    # TODO
	
	# sdram初始化
    # 16-bit SDRAM @ DYCS0 (K4M563233G-HN75/HY57V561620OCT) 
    mww 0xFFE08030 0x00000001       # EMCDynamicRP
    mww 0xFFE08034 0x00000003       # EMCDynamicRAS
    mww 0xFFE08038 0x00000001       # EMCDynamicSREX
    mww 0xFFE0803C 0x00000001       # EMCDynamicAPR
    mww 0xFFE08040 0x00000005       # EMCDynamicDAL
    mww 0xFFE08044 0x00000001       # EMCDynamicWR
    mww 0xFFE08048 0x00000005       # EMCDynamicRC
    mww 0xFFE0804C 0x00000005       # EMCDynamicRFC
    mww 0xFFE08050 0x00000001       # EMCDynamicXSR
    mww 0xFFE08054 0x00000001       # EMCDynamicRRD
    mww 0xFFE08058 0x00000001       # EMCDynamicMRD
    #
	mww 0xFFE08028 0x00000001       # EMCDynamicReadConfig

    mww 0xFFE08104 0x00000303       # EMCDynamicRasCas0 3clk/3clk
    mww 0xFFE08100 0x00000680       # EMCDynamicConfig0
    sleep 100
    mww 0xFFE08020 0x00000183       # EMCDynamicControl: Clock on continuously, NOP
    sleep 10
    mww 0xFFE08020 0x00000103       # EMCDynamicControl: PRECHARGE-ALL
    sleep 10
	mww 0xFFE08024 0x00000002       # EMCDynamicRefresh
    sleep 10
	mww 0xFFE08024 0x00000028       # EMCDynamicRefresh
    mww 0xFFE08020 0x00000083       # EMCDynamicControl: MODE
    mdw 0xA0033000 1                # Set SDRAM mode register
    mww 0xFFE08020 0x00000000       # EMCDynamicControl: NORMAL
    mww 0xFFE08100 0x00080680       # EMCDynamicConfig0: Enable buffers
	sleep 100
}


#rest start handler
$_TARGETNAME configure -event reset-start {
    # Back to the slow JTAG clock
	# 复位时先将定JTAG速度，任何时候JTAG速度不能超过CPU速度的1/6
    jtag_rclk 20
}

